name: Deploy Autom√°tico

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar o reposit√≥rio do c√≥digo-fonte
        uses: actions/checkout@v4

      - name: Clonar os secrets do reposit√≥rio privado
        run: |
          git clone https://oauth2:${{ secrets.GH_TOKEN }}@github.com/thiagosol/secrets.git
          mv secrets/secrets.json secrets.json

      - name: Ler secrets do arquivo JSON
        id: secrets
        run: |
          echo "::set-output name=DEPLOY_USER::$(jq -r '.DEPLOY_USER' secrets.json)"
          echo "::set-output name=DEPLOY_PASS::$(jq -r '.DEPLOY_PASS' secrets.json)"
          echo "::set-output name=LUMIMONEY_ADMIN_EMAIL::$(jq -r '.LUMIMONEY_ADMIN_EMAIL' secrets.json)"
          echo "::set-output name=LUMIMONEY_ADMIN_PASS::$(jq -r '.LUMIMONEY_ADMIN_PASS' secrets.json)"
          echo "::set-output name=DB_POSTGRES_USER::$(jq -r '.DB_POSTGRES_USER' secrets.json)"
          echo "::set-output name=DB_POSTGRES_PASS::$(jq -r '.DB_POSTGRES_PASS' secrets.json)"

      - name: Chamar o endpoint de deploy
        run: |
          curl -X POST "http://deploy.thiagosol.com/deploy" \
            -u ${{ steps.secrets.outputs.DEPLOY_USER }}:${{ steps.secrets.outputs.DEPLOY_PASS }} \
            -H "Content-Type: application/json" \
            -d '{
              "service": "${{ github.event.repository.name }}",
              "branch": "${{ github.repository_owner }}",
              "env_vars": [
                "LUMIMONEY_ADMIN_EMAIL=${{ steps.secrets.outputs.LUMIMONEY_ADMIN_EMAIL }}",
                "LUMIMONEY_ADMIN_PASS=${{ steps.secrets.outputs.LUMIMONEY_ADMIN_PASS }}",
                "DB_POSTGRES_USER=${{ steps.secrets.outputs.DB_POSTGRES_USER }}",
                "DB_POSTGRES_PASS=${{ steps.secrets.outputs.DB_POSTGRES_PASS }}"
              ]
            }'

      - name: Aguardar Conclus√£o do Deploy (M√°x. 30 Minutos)
        run: |
          LOG_URL="https://deploy.thiagosol.com/logs/${{ github.event.repository.name }}"
          AUTH="${{ steps.secrets.outputs.DEPLOY_USER }}:${{ steps.secrets.outputs.DEPLOY_PASS }}"
          
          echo "üü° Monitorando logs em: $LOG_URL"
          echo "‚è≥ Aguardando at√© 30 minutos pelo deploy..."

          START_TIME=$(date +%s)
          TIMEOUT=$((30 * 60))  # 30 minutos em segundos
          LAST_LOG=""
          LAST_UPDATE_TIME=$(date +%s)  # Marca o tempo da √∫ltima atualiza√ß√£o do log

          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            NO_UPDATE_ELAPSED=$((CURRENT_TIME - LAST_UPDATE_TIME))

            if [ $ELAPSED -gt $TIMEOUT ]; then
              echo "‚ùå Tempo limite de 30 minutos atingido. Cancelando deploy..."
              exit 1
            fi

            LOGS=$(curl -u "$AUTH" -s "$LOG_URL")

            # Filtrar apenas novas linhas desde a √∫ltima itera√ß√£o
            NEW_LOGS=$(echo "$LOGS" | grep -Fxv -f <(echo "$LAST_LOG"))

            if [ -n "$NEW_LOGS" ]; then
              echo "$NEW_LOGS"  # Exibe apenas as linhas novas do log
              LAST_LOG="$LOGS"  # Atualiza o log anterior para a pr√≥xima itera√ß√£o
              LAST_UPDATE_TIME=$(date +%s)  # Atualiza o tempo da √∫ltima mudan√ßa
            fi

            # Se n√£o houver novas linhas por 5 minutos, falha
            if [ $NO_UPDATE_ELAPSED -gt 300 ]; then
              echo "‚ùå Nenhuma nova linha no log em 5 minutos. Deploy travado."
              exit 1
            fi

            # Verifica se o deploy foi finalizado
            if echo "$LOGS" | grep -qE "Deploy finalizado!|Deploy sem docker finalizado!"; then
              echo "‚úÖ Deploy finalizado com sucesso!"
              exit 0
            fi
            
            sleep 10  # Aguarda 10 segundos antes da pr√≥xima checagem
          done
